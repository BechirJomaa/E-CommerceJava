/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI.Forum;

import DAO.CommentaireSujetDAO;
import DAO.SujetDAO;
import DAO.UserDAO;
import Entity.CommentaireSujet;
import Entity.Sujet;
import Entity.User;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.util.List;
import javax.swing.JLabel;
import javax.swing.JTextField;

/**
 *
 * @author gafsi
 */
public class PanelSujetDisplay extends javax.swing.JPanel {

    /**
     * Creates new form PanelSujetDisplay
     */
    int sujetId;
    int userId;
    private User user;
    private Sujet sujet;
    private List<CommentaireSujet> listCom;
    Integer[] lid;
    JTextField[] tabCom;
    JLabel[] lmodifier;
    JLabel[] lSupprimer;

    public PanelSujetDisplay(int sujetId, int userId) {
        this.sujetId = sujetId;
        this.userId = userId;
        user = new UserDAO().findUserById(userId);
        sujet = new SujetDAO().findSujetById(sujetId);
        initComponents();
        loadSujet();
        loadComments();
        commentsActions();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lTitre = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        panelComments = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        taSujet = new javax.swing.JTextArea();
        tfCommenter = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();

        setBackground(new java.awt.Color(0, 0, 0));
        setOpaque(false);
        setLayout(null);

        lTitre.setFont(new java.awt.Font("Adobe Caslon Pro", 3, 18)); // NOI18N
        lTitre.setForeground(new java.awt.Color(51, 51, 51));
        lTitre.setText("Titre");
        add(lTitre);
        lTitre.setBounds(600, 30, 118, 43);

        jScrollPane2.setBackground(new java.awt.Color(255, 255, 255));
        jScrollPane2.setBorder(null);
        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane2.setAutoscrolls(true);
        jScrollPane2.setOpaque(false);
        jScrollPane2.setPreferredSize(new java.awt.Dimension(640, 150));

        panelComments.setBackground(new java.awt.Color(255, 255, 255));
        panelComments.setAlignmentX(0.0F);
        panelComments.setAlignmentY(0.0F);
        panelComments.setPreferredSize(new java.awt.Dimension(658, 400));
        panelComments.setLayout(null);
        jScrollPane2.setViewportView(panelComments);

        add(jScrollPane2);
        jScrollPane2.setBounds(290, 260, 640, 150);

        jScrollPane1.setBackground(new java.awt.Color(255, 255, 255));
        jScrollPane1.setBorder(null);
        jScrollPane1.setOpaque(false);

        taSujet.setEditable(false);
        taSujet.setColumns(20);
        taSujet.setFont(new java.awt.Font("Monospaced", 0, 16)); // NOI18N
        taSujet.setLineWrap(true);
        taSujet.setRows(5);
        taSujet.setBorder(null);
        taSujet.setOpaque(false);
        jScrollPane1.setViewportView(taSujet);

        add(jScrollPane1);
        jScrollPane1.setBounds(290, 80, 640, 150);
        add(tfCommenter);
        tfCommenter.setBounds(290, 440, 370, 30);

        jButton1.setText("Commenter");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        add(jButton1);
        jButton1.setBounds(670, 440, 100, 30);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        CommentaireSujet com = new CommentaireSujet();
        com.setCommentaire(tfCommenter.getText());
        com.setSujet(sujet);
        com.setUser(user);
        CommentaireSujetDAO comDao = new CommentaireSujetDAO();
        comDao.addCommentaire(com);
        tfCommenter.setText("");
        panelComments.removeAll();
        panelComments.repaint();
        panelComments.revalidate();
        loadComments();
        commentsActions();
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lTitre;
    private javax.swing.JPanel panelComments;
    private javax.swing.JTextArea taSujet;
    private javax.swing.JTextField tfCommenter;
    // End of variables declaration//GEN-END:variables
private void loadSujet() {
        taSujet.setText(sujet.getSujet());
        lTitre.setText(sujet.getTitre());
    }

    private void loadComments() {
        CommentaireSujet com = new CommentaireSujet();
        CommentaireSujetDAO comDAO = new CommentaireSujetDAO();
        listCom = comDAO.findCommentaireBySujet(sujetId);
        lid = new Integer[listCom.size()];
        lmodifier = new JLabel[listCom.size()];
        lSupprimer = new JLabel[listCom.size()];
        tabCom = new JTextField[listCom.size()];
        JLabel[] lUser = new JLabel[listCom.size()];
        int x = 10;
        int y = 26;
        for (int i = 0; i < listCom.size(); i++) {
            // ajout du proprietaire
            lUser[i] = new JLabel(listCom.get(i).getUser().getUsername());
            lUser[i].setBounds(x, y, 82, 17);
            lUser[i].setForeground(Color.black);
            lUser[i].setFont(new java.awt.Font("Tahoma", 1, 14));
            panelComments.add(lUser[i]);
            //ajout du corps
            tabCom[i] = new JTextField();
            tabCom[i].setText(listCom.get(i).getCommentaire());
            tabCom[i].setBounds(x + 100, y, 200, 25);
            tabCom[i].setForeground(Color.black);
            tabCom[i].setFont(new java.awt.Font("Arial", 0, 12));
            tabCom[i].setEditable(false);
            panelComments.add(tabCom[i]);

            if (userId == listCom.get(i).getUser().getId()) {
                //ajouts du boutton modifier 
                lmodifier[i] = new JLabel("Modifier");
                lmodifier[i].setBounds(x + 105, y + 25, 46, 13);
                lmodifier[i].setForeground(new java.awt.Color(51, 51, 255));
                lmodifier[i].setFont(new java.awt.Font("Tahoma", 1, 10));
                panelComments.add(lmodifier[i]);
                //ajouts du boutton supprimer
                lSupprimer[i] = new JLabel("Supprimer");
                lSupprimer[i].setBounds(x + 160, y + 25, 60, 13);
                lSupprimer[i].setForeground(new java.awt.Color(51, 51, 255));
                lSupprimer[i].setFont(new java.awt.Font("Tahoma", 1, 10));
                panelComments.add(lSupprimer[i]);
            }
            lid[i] = listCom.get(i).getId();
            y += 60;
        }
    }

    private void commentsActions() {
        for (int i = 0; i < listCom.size(); i++) {
            int j = i;
            if(lmodifier[i]!=null){ 
            lmodifier[i].addMouseListener(new java.awt.event.MouseAdapter() {
                @Override
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    modifierMouseClicked(evt, j);
                }

                @Override
                public void mouseEntered(java.awt.event.MouseEvent evt) {
                    modifierMouseEntered(evt, j);
                }

                @Override
                public void mouseExited(java.awt.event.MouseEvent evt) {
                    modifierMouseExited(evt, j);
                }
            });
            tabCom[i].addKeyListener(new KeyAdapter() {
                @Override
                public void keyPressed(KeyEvent e) {
                    modifierKeyPressed(e, j);
                }
            }); 
       
            
            lSupprimer[i].addMouseListener(new java.awt.event.MouseAdapter() {
                @Override
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    supprimerMouseClicked(evt, j);
                }

                @Override
                public void mouseEntered(java.awt.event.MouseEvent evt) {
                    supprimerMouseEntered(evt, j);
                }

                @Override
                public void mouseExited(java.awt.event.MouseEvent evt) {
                    supprimerMouseExited(evt, j);
                }

            });
            }

        }
    }

    private void modifierMouseClicked(MouseEvent evt, int i) {
        tabCom[i].setEditable(true);
//        removeAll();
//        repaint();
//        revalidate();
//        PanelSujetDisplay p = new PanelSujetDisplay(lid[i], userId);
//        p.setBounds(0, 0, 1310, 500);
//        add(p);
//        setCursor(new Cursor(Cursor.DEFAULT_CURSOR));

    }

    private void modifierMouseEntered(MouseEvent evt, int j) {
        setCursor(new Cursor(Cursor.HAND_CURSOR));

    }

    private void modifierMouseExited(MouseEvent evt, int j) {
        setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
    }

    private void supprimerMouseClicked(MouseEvent evt, int i) {
        CommentaireSujetDAO sujetDAO = new CommentaireSujetDAO();
        sujetDAO.removeCommentaireById(listCom.get(i).getId());
        panelComments.removeAll();
        panelComments.repaint();
        panelComments.revalidate();
        loadComments();
        commentsActions();
        setCursor(new Cursor(Cursor.DEFAULT_CURSOR));

    }

    private void supprimerMouseEntered(MouseEvent evt, int j) {
        setCursor(new Cursor(Cursor.HAND_CURSOR));

    }

    private void supprimerMouseExited(MouseEvent evt, int j) {
        setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
    }
    private void modifierKeyPressed(KeyEvent e,int j){
         if (e.getKeyCode()==KeyEvent.VK_ENTER ){
                        CommentaireSujet com=new CommentaireSujet();
                        CommentaireSujetDAO comDAO=new CommentaireSujetDAO();
                        com.setSujet(sujet);
                        com.setCommentaire(tabCom[j].getText());
                        com.setUser(user);
                        com.setId(listCom.get(j).getId());
                        comDAO.updateCommentaire(com);
                        tabCom[j].setEditable(false);
                  }
    }

}
